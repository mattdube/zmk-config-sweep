/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    // flavor = "tap-preferred";

    flavor = "balanced";
    tapping_term_ms = <200>;
    quick-tap-ms = <200>;
};

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        combo_shift {
            bindings = <&sk LSHIFT>;
            key-positions = <1 2>;
        };

        compo_alt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <21 22>;
        };

        combo_cmd {
            bindings = <&sk RCMD>;
            key-positions = <27 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q           &kp W           &kp F        &kp P             &kp B            &kp J      &kp L              &kp U        &kp Y            &kp TAB
&mt LEFT_GUI A  &mt LEFT_ALT R  &mt LCTRL S  &mt LEFT_SHIFT T  &kp G            &kp M      &mt RIGHT_SHIFT N  &mt RCTRL E  &mt RIGHT_ALT I  &mt RGUI O
&kp Z           &kp X           &kp C        &kp D             &kp V            &kp K      &kp H              &kp COMMA    &kp DOT          &kp LS(SLASH)
                                             &mo 1             &lt 1 BACKSPACE  &kp SPACE  &lt 2 RETURN
            >;
        };

        NUMBERS {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5     &kp F6        &kp F7    &kp F8   &kp F9        &kp F10
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5     &kp NUMBER_6  &kp N7    &kp N8   &kp NUMBER_9  &kp N0
&trans        &kp GRAVE     &kp AT_SIGN   &kp MINUS     &kp EQUAL  &kp TILDE     &kp HASH  &kp F12  &kp F11       &kp ENTER
                                          &trans        &trans     &trans        &kp ESC
            >;
        };

        SYMBOLS {
            bindings = <
&kp EXCL    &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT        &kp CARET         &kp AMPS              &kp ASTRK              &kp BACKSLASH     &kp PIPE
&kp MINUS   &kp EQUAL    &kp PLUS  &kp UNDER   &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&caps_word  &trans       &trans    &trans      &kp QUESTION       &kp SLASH         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EXCL          &trans
                                   &kp TAB     &kp ESCAPE         &trans            &trans
            >;
        };

        NAV {
            bindings = <
&kp ESC           &kp F1        &kp F2            &kp F3          &kp F4         &kp PAGE_UP     &mkp MB1        &mkp MB2      &kp END       &kp F1
&kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &kp PG_UP      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT     &kp DELETE
&kp LG(Z)         &kp LG(X)     &kp LG(C)         &kp LG(V)       &kp PAGE_DOWN  &kp PAGE_DOWN   &kp C_MUTE      &kp C_VOL_DN  &kp C_VOL_UP  &to 4
                                                  &to 0           &trans         &trans          &trans
            >;
        };

        System {
            bindings = <
&sys_reset   &bt BT_NXT  &bt BT_PRV  &trans          &bt BT_SEL 0  &bt BT_CLR  &trans  &trans  &trans  &sys_reset
&bootloader  &trans      &trans      &trans          &bt BT_SEL 1  &trans      &trans  &trans  &trans  &bootloader
&trans       &trans      &trans      &bt BT_CLR_ALL  &bt BT_SEL 2  &trans      &trans  &trans  &trans  &trans
                                     &to 0           &to 5         &trans      &trans
            >;
        };

        left_hand {
            bindings = <
&kp ESC        &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &kp TAB                 &trans  &trans  &trans  &trans  &trans
&kp BACKSPACE  &kp LEFT     &kp DOWN  &kp RIGHT      &kp DEL                 &trans  &trans  &trans  &trans  &trans
&trans         &trans       &trans    &trans         &trans                  &trans  &trans  &trans  &trans  &trans
                                      &to 0          &mt LEFT_COMMAND SPACE  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
